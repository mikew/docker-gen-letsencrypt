{{ $CurrentContainer := where $ "ID" .Docker.CurrentContainerID | first }}

{{ define "upstream" }}
  {{ $networks := .Networks }}
  {{ $debug_all := .Debug }}
  {{ $server_found := "false" }}
  {{ $upstream := .Upstream }}

  {{ range $container := .Containers }}
    {{ $debug := (eq (coalesce $container.Env.DEBUG $debug_all "false") "true") }}

    {{/* If only 1 port exposed, use that as a default, else 80 */}}
    {{ $defaultPort := (when (eq (len $container.Addresses) 1) (first $container.Addresses) (dict "Port" "80")).Port }}
    {{ $port := (coalesce $container.Env.VIRTUAL_PORT $defaultPort) }}

    {{ $address := where $container.Addresses "Port" $port | first }}

    {{ if $debug }}
# exposed ports: {{ $container.Addresses }}
# Default virtual port: {{ $defaultPort }}
# VIRTUAL_PORT: {{ $container.Env.VIRTUAL_PORT }}
      {{ if not $address }}
# /!\ Virtual port not exposed
      {{ end }}
    {{ end }}

    {{ range $knownNetwork := $networks }}
      {{ range $containerNetwork := $container.Networks }}
        {{ if (and (ne $containerNetwork.Name "ingress") (or (eq $knownNetwork.Name $containerNetwork.Name) (eq $knownNetwork.Name "host"))) }}
        {{/* if (ne $containerNetwork.Name "ingress") */}}
          {{ if $address }}
            {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
            {{ if and $container.Node.ID $address.HostPort }}
              {{ $server_found = "true" }}
add-upstream '{{ $upstream }}' '{{ $container.Node.Name }}/{{ $container.Name }}' '{{ $container.Node.Address.IP }}:{{ $address.HostPort }}'
              {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
            {{ else if $containerNetwork }}
              {{ $server_found = "true" }}
add-upstream '{{ $upstream }}' '{{ $containerNetwork.Name }}/{{ $container.Name }}' '{{ $containerNetwork.IP }}:{{ $address.Port }}'
            {{ end }}
          {{ else if $containerNetwork }}
            {{ if $containerNetwork.IP }}
              {{ $server_found = "true" }}
add-upstream '{{ $upstream }}' '{{ $containerNetwork.Name }}/{{ $container.Name }}' '{{ $containerNetwork.IP }}:{{ $port }}'
            {{ else }}
# /!\ No IP for this network!
            {{ end }}
          {{ end }}
        {{ else }}
# Cannot connect to network '{{ $containerNetwork.Name }}' of this container
        {{ end }}
      {{ end }}
    {{ end }}

    {{/* nginx-proxy/nginx-proxy#1105 */}}
    {{ if (eq $server_found "false") }}
# /!\ Server not found
    {{ end }}
  {{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

register-host '{{ $host }}'
cert-name '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CERT_NAME")) "" }}'
cors-enabled '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_ENABLED")) "" }}'
cors-origin '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_ORIGIN")) "" }}'
cors-methods '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_METHODS")) "" }}'
cors-headers '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_HEADERS")) "" }}'

{{ template "upstream" (dict "Upstream" $host "Containers" $containers "Networks" $CurrentContainer.Networks "Debug" "true") }}

{{ end }}
