{{ define "upstream" }}
  {{ if .Address }}
    {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
    {{ if and .Container.Node.ID .Address.HostPort }}
add-upstream '{{ .Host }}' '{{ .Container.Node.Name }}/{{ .Container.Name }}' '{{ .Container.Node.Address.IP }}:{{ .Address.HostPort }}'
    {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
    {{ else }}
add-upstream '{{ .Host }}' '{{ .Container.Name }}' '{{ .Address.IP }}:{{ .Address.Port }}'
    {{ end }}
  {{ end }}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

register-host '{{ $host }}'
cert-name '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CERT_NAME")) "" }}'
cors-enabled '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_ENABLED")) "" }}'
cors-origin '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_ORIGIN")) "" }}'
cors-methods '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_METHODS")) "" }}'
cors-headers '{{ $host }}' '{{ or (first (groupByKeys $containers "Env.CORS_HEADERS")) "" }}'

{{ range $container := $containers }}
  {{ $addrLen := len $container.Addresses }}
  {{/* If only 1 port exposed, use that */}}
  {{ if eq $addrLen 1 }}
    {{ $address := index $container.Addresses 0 }}
    {{ template "upstream" (dict "Host" $host "Container" $container "Address" $address) }}
  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
  {{ else }}
    {{ $port := coalesce $container.Env.VIRTUAL_PORT "80" }}
    {{ $address := where $container.Addresses "Port" $port | first }}
    {{ template "upstream" (dict "Host" $host "Container" $container "Address" $address) }}
  {{ end }}
{{ end }}

{{ end }}
