#!/usr/bin/env bash

source /app/load-spec

TMP_CONF="/output/nginx-tmp.conf"
REAL_CONF="/etc/nginx/conf.d/default.conf"
gen-nginx-conf () {
  echo > "${TMP_CONF}"
  echo '# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
  # scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ""      $scheme;
  }

  # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
  # Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    "" close;
  }' >> "${TMP_CONF}"
  nginx-gzip-conf >> "${TMP_CONF}"
  nginx-proxy-conf >> "${TMP_CONF}"
  nginx-server-conf >> "${TMP_CONF}"
}

nginx-server-conf () {
  for host in ${HOSTS[@]}; do
    if [ -f /etc/nginx/vhost.d/${host} ]; then
      if ! grep -q '/.well-known/' /etc/nginx/vhost.d/${host}; then
        echo >> /etc/nginx/vhost.d/${host}
        cat /app/acme-vhost.conf >> /etc/nginx/vhost.d/${host}
      fi
    else
      cp /app/acme-vhost.conf /etc/nginx/vhost.d/${host}
    fi

    echo "upstream $host {
      ${UPSTREAM[$host]}
    }"

    # Get the basename of the certificate
    # Default is default
    CERT_NAME="default"
    # If $host.crt exists, use $host
    if [ -f "/etc/nginx/certs/${host}.crt" ]; then
      CERT_NAME="$host"
    fi
    # If CERT_NAME defined in container env, use that
    if [ -n "${CERT_NAMES[$host]}" ]; then
      CERT_NAME="${CERT_NAMES[$host]}"
    fi
    echo $CERT_NAME >&2

    SSL_ENABLED=""
    #HTTP_REDIRECT=""
    PORT="80"
    #SSL_CONF=""
    if [ -f "/etc/nginx/certs/${CERT_NAME}.crt" ]; then
    #if true; then
      PORT="443 ssl http2"
      SSL_ENABLED="true"
      SSL_DHPARAM=""
      if [ -f "/etc/nginx/certs/${CERT_NAME}.dhparam.pem" ]; then
        SSL_DHPARAM="ssl_dhparam /etc/nginx/certs/${CERT_NAME}.dhparam.pem;"
      fi
      HTTP_REDIRECT="# Redirecto to https
      server {
        server_name ${host};
        listen 80;
        access_log /var/log/nginx/${host}.log;
        return 301 https://\$host\$request_uri;
      }"
      SSL_CONF="ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

      ssl_prefer_server_ciphers on;
      ssl_session_timeout 5m;
      ssl_session_cache shared:SSL:50m;

      ssl_certificate /etc/nginx/certs/${CERT_NAME}.crt;
      ssl_certificate_key /etc/nginx/certs/${CERT_NAME}.key;
      ${SSL_DHPARAM}

      add_header Strict-Transport-Security \"max-age=31536000\";"
    fi

    if [ -f "/etc/nginx/htpasswd/${host}" ]; then
      AUTH_BASIC="auth_basic \"Restricted ${host}\";
      auth_basic_user_file /etc/nginx/htpasswd/${host};"
    fi

    if [ -f "/etc/nginx/vhost.d/${host}" ]; then
      EXTRA_CONF_SERVER="include /etc/nginx/vhost.d/${host};"
    elif [ -f "/etc/nginx/vhost.d/default" ]; then
      EXTRA_CONF_SERVER="include /etc/nginx/vhost.d/default;"
    fi

    if [ -f "/etc/nginx/vhost.d/${host}_location" ]; then
      EXTRA_CONF_LOCATION="include /etc/nginx/vhost.d/${host}_location;"
    elif [ -f "/etc/nginx/vhost.d/default_location" ]; then
      EXTRA_CONF_LOCATION="include /etc/nginx/vhost.d/default_location;"
    fi

    echo "${HTTP_REDIRECT}
    server {
      server_name ${host};
      listen ${PORT};
      access_log /var/log/nginx/${host}.log;
      ${SSL_CONF}
      ${EXTRA_CONF_SERVER}

      location / {
        proxy_pass http://${host};
        ${AUTH_BASIC}
        ${EXTRA_CONF_LOCATION}
      }
    }"
  done
}

nginx-gzip-conf () {
  if [ ! -f /etc/nginx/conf.d/gzip.conf ]; then
    echo 'gzip on;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/javascript
        application/javascript
        application/json
        application/x-javascript
        js
        text/xml
        application/xml
        application/rss+xml
        image/svg+xml;
    #gzip_min_length 256;
    gzip_vary on;
    gzip_disable "msie6";
    gzip_comp_level 4;'
  fi
}

nginx-proxy-conf () {
  if [ ! -f /etc/nginx/conf.d/proxy.conf ]; then
    echo '# HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;'
  fi
}

gen-nginx-conf
if ! cmp -s "${TMP_CONF}" "${REAL_CONF}"; then
  cp "${TMP_CONF}" "${REAL_CONF}"
  /app/reload-nginx
  /app/update-certs
  gen-nginx-conf
  cp "${TMP_CONF}" "${REAL_CONF}"
  /app/reload-nginx
  echo 'config has changed'
fi
